---
 - name: aws roles
   hosts: localhost
   vars:
     - vpc_cidr: 10.0.0.0/16
     - vpc_region: us-east-1
     - vpc_access_key: 
     - vpc_secret_key: 


     - subnet_cidr_1a: 10.0.1.0/28
     - subnet_az_1a: us-east-1a

     - subnet_cidr_1b: 10.0.2.0/28
     - subnet_az_1b: us-east-1b

     - subnet_cidr_1c: 10.0.3.0/28
     - subnet_az_1c: us-east-1c

     - instance_type: t2.micro
     - security_group: ssh-web

     - image_id: ami-026ebd4cfe2c043b2

   tasks:
     - name: create vpc
       amazon.aws.ec2_vpc_net:
         name: custom_vpc
         cidr_block: "{{ vpc_cidr }}"
         region: "{{ vpc_region }}"
         state: present
         aws_access_key: "{{ vpc_access_key }}"
         aws_secret_key: "{{ vpc_secret_key }}"
       register: vpc

     - name: Store VPC ID in a variable
       set_fact:
         vpc_id: "{{ vpc.vpc.id }}"

     - name: create subnet for first az
       amazon.aws.ec2_vpc_subnet:
         vpc_id: "{{ vpc_id }}"
         state: present
         az: "{{ subnet_az_1a }}"
         cidr: "{{ subnet_cidr_1a }}"
       register: az1_apse3
     - debug:
         var: az1_apse3.subnet.id

     - name: create subnet for first az
       amazon.aws.ec2_vpc_subnet:
         vpc_id: "{{ vpc_id }}"
         state: present
         az: "{{ subnet_az_1b }}"
         cidr: "{{ subnet_cidr_1b }}"
       register: az2_apse3
     - debug:
         var: az2_apse3.subnet.id

     - name: create subnet for first az
       amazon.aws.ec2_vpc_subnet:
         vpc_id: "{{ vpc_id }}"
         state: present
         az: "{{ subnet_az_1c }}"
         cidr: "{{ subnet_cidr_1c }}"
       register: az3_apse3
     - debug:
         var: az3_apse3.subnet.id

     - name: create internet gateway
       amazon.aws.ec2_vpc_igw:
         vpc_id: "{{ vpc_id }}"
         state: present
       register: igw

     - name: create custom route table
       amazon.aws.ec2_vpc_route_table:
         vpc_id: "{{ vpc_id }}"
         region: "{{ vpc_region }}"
         subnets:
           - "{{ az1_apse3.subnet.id }}"
           - "{{ az2_apse3.subnet.id }}"
           - "{{ az3_apse3.subnet.id }}"
         routes:
           - dest: 0.0.0.0/0
             gateway_id: "{{ igw.gateway_id }}"

     - name: create a new EC2 key pair, returns generated private key
       amazon.aws.ec2_key:
         name: my_keypair


     - name: create security group
       amazon.aws.ec2_group:
         name: ssh-web
         description: allow ssh and http
         vpc_id: "{{ vpc_id }}"
         region: "{{ vpc_region }}"
         rules:
           - proto: tcp
             ports: 22
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             ports: 80
             cidr_ip: 0.0.0.0/0

     - name: Store VPC ID in a variable
       set_fact:
         subnet_id: "{{ az1_apse3.subnet.id }}"


     - name: start an instance with a public IP address
       amazon.aws.ec2_instance:
         name: "public-compute-instance"
         key_name: "my_keypair"
         region: "{{ vpc_region }}"
         vpc_subnet_id: "{{ az1_apse3.subnet.id }}"
         instance_type: "{{ instance_type }}"
         security_group: "{{ security_group }}"
         network:
           assign_public_ip: true
         image_id: "{{ image_id }}"
         tags:
           Environment: Testing

     - name: start an instance with a public IP address
       amazon.aws.ec2_instance:
         name: "public1-compute-instance"
         key_name: "my_keypair"
         region: "{{ vpc_region }}"
         vpc_subnet_id: "{{ az2_apse3.subnet.id }}"
         instance_type: "{{ instance_type }}"
         security_group: "{{ security_group }}"
         network:
           assign_public_ip: true
         image_id: "{{ image_id }}"
         tags:
           Environment: Testing

     - name: start an instance with a public IP address
       amazon.aws.ec2_instance:
         name: "public-compute-instance"
         key_name: "my_keypair"
         region: "{{ vpc_region }}"
         vpc_subnet_id: "{{ az3_apse3.subnet.id }}"
         instance_type: "{{ instance_type }}"
         security_group: "{{ security_group }}"
         network:
           assign_public_ip: true
         image_id: "{{ image_id }}"
         tags:
           Environment: Testing

